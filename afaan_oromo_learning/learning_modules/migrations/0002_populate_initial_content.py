# Generated by Django 5.2.3 on YYYY-MM-DD HH:MM # Django will fill this in

from django.db import migrations

def populate_data(apps, schema_editor):
    VocabularyItem = apps.get_model('learning_modules', 'VocabularyItem')
    GrammarTopic = apps.get_model('learning_modules', 'GrammarTopic')

    # Vocabulary Items
    # Category: Greetings
    VocabularyItem.objects.create(
        afaan_oromo_word="Akkam",
        translation_english="How are you?",
        category="Greetings",
        example_sentence_afaan="Akkam jirtu?",
        example_sentence_translation="How are you (plural/formal)?"
    )
    VocabularyItem.objects.create(
        afaan_oromo_word="Nagayaa",
        translation_english="Peace / Hello / Hi",
        category="Greetings",
        example_sentence_afaan="Nagayaa ooli.",
        example_sentence_translation="Have a good day."
    )
    VocabularyItem.objects.create(
        afaan_oromo_word="Fayyaa",
        translation_english="Fine / Good / Healthy",
        category="Greetings",
        example_sentence_afaan="Ani fayyaa, galatoomi.",
        example_sentence_translation="I am fine, thank you."
    )

    # Category: Numbers
    VocabularyItem.objects.create(afaan_oromo_word="Tokko", translation_english="One", category="Numbers")
    VocabularyItem.objects.create(afaan_oromo_word="Lama", translation_english="Two", category="Numbers")
    VocabularyItem.objects.create(afaan_oromo_word="Sadii", translation_english="Three", category="Numbers")
    VocabularyItem.objects.create(afaan_oromo_word="Afur", translation_english="Four", category="Numbers")
    VocabularyItem.objects.create(afaan_oromo_word="Shan", translation_english="Five", category="Numbers")

    # Grammar Topics
    GrammarTopic.objects.create(
        title="Introduction to Afaan Oromo Alphabet (Qubee)",
        explanation="<p>Afaan Oromo is written using a Latin-based alphabet called Qubee. It was adopted in the early 1990s.</p>"
                    "<p>Qubee generally has a one-to-one correspondence between letters and sounds, making it relatively phonetic.</p>"
                    "<h4>Key features:</h4>"
                    "<ul><li>Consists of 26 basic Latin letters, plus some digraphs (e.g., 'ch', 'dh', 'ny', 'sh', 'ph').</li>"
                    "<li>Vowels: a, e, i, o, u (can be short or long, length often indicated by doubling the vowel, e.g., 'a' vs 'aa').</li>"
                    "<li>No silent letters.</li></ul>"
                    "<p>Example letters and sounds: <strong>B</strong> as in 'book', <strong>D</strong> as in 'dog', <strong>G</strong> as in 'go', <strong>J</strong> as in 'jump'.</p>",
        order=1
    )
    GrammarTopic.objects.create(
        title="Basic Sentence Structure (Subject-Object-Verb)",
        explanation="<p>Afaan Oromo typically follows a Subject-Object-Verb (SOV) word order in declarative sentences.</p>"
                    "<p>This means the subject comes first, followed by the object, and the verb comes at the end of the sentence.</p>"
                    "<h4>Example:</h4>"
                    "<p><em>Intalli kitaaba dubbisti.</em></p>"
                    "<ul><li><strong>Intalli</strong> (The girl) - Subject</li>"
                    "<li><strong>kitaaba</strong> (a book) - Object</li>"
                    "<li><strong>dubbisti</strong> (reads) - Verb</li></ul>"
                    "<p>Translation: The girl reads a book.</p>"
                    "<p>This is a fundamental concept for forming basic sentences.</p>",
        order=2
    )
    GrammarTopic.objects.create(
        title="Nouns: Gender and Number (Brief Overview)",
        explanation="<p>Nouns in Afaan Oromo have gender (masculine or feminine) and number (singular or plural).</p>"
                    "<h4>Gender:</h4>"
                    "<ul><li>Gender is often inherent to the noun but can sometimes be distinguished by suffixes (e.g., some masculine nouns end in -a, some feminine in -u or -tti, but there are many variations and exceptions).</li>"
                    "<li>Adjectives and verbs may change form to agree with the gender of the noun they refer to.</li></ul>"
                    "<h4>Number:</h4>"
                    "<ul><li>Plurality is commonly formed by adding suffixes like '-oota', '-wwan', '-lee', or others, depending on the noun's ending and class.</li>"
                    "<li>Example: <em>nama</em> (person) &rarr; <em>namoota</em> (people). <em>Saree</em> (dog) &rarr; <em>sareewwan</em> (dogs).</li></ul>"
                    "<p>This is a simplified overview; noun morphology can be complex.</p>",
        order=3
    )

def unpopulate_data(apps, schema_editor):
    # This function could be used to delete the data if the migration is reversed.
    # For initial content, simply deleting all items might be too broad if other data exists.
    # A more precise approach would be to delete only the specific items created.
    # For simplicity here, we'll make it a no-op or delete based on specific criteria if needed.
    # For now, let's assume we don't want to auto-delete everything on unmigrate for safety.
    # If specific deletion is needed, one would filter by the exact data added.
    # For example:
    # VocabularyItem = apps.get_model('learning_modules', 'VocabularyItem')
    # VocabularyItem.objects.filter(afaan_oromo_word__in=["Akkam", "Nagayaa", ...]).delete()
    # GrammarTopic = apps.get_model('learning_modules', 'GrammarTopic')
    # GrammarTopic.objects.filter(title__in=["Introduction to Afaan Oromo...", ...]).delete()
    pass # Or implement specific deletions


class Migration(migrations.Migration):

    dependencies = [
        ('learning_modules', '0001_initial'), # Depends on the previous model creation migration
    ]

    operations = [
        migrations.RunPython(populate_data, reverse_code=unpopulate_data),
    ]
